Search.setIndex({"docnames": ["basics/evaluators", "basics/generators", "basics/installation", "index", "modules/ml3m.base", "modules/ml3m.errors", "modules/ml3m.mcq", "modules/ml3m.qa", "modules/ml3m.utils.openai"], "filenames": ["basics/evaluators.rst", "basics/generators.rst", "basics/installation.rst", "index.rst", "modules/ml3m.base.rst", "modules/ml3m.errors.rst", "modules/ml3m.mcq.rst", "modules/ml3m.qa.rst", "modules/ml3m.utils.openai.rst"], "titles": ["Evaluating Model Performance", "Generating Model Responses", "Installation", "Welcome to ml3m\u2019s documentation!", "ml3m.base: Base Classes", "ml3m.errors: Customized Exceptions", "ml3m.mcq: Multiple Choice Questions", "ml3m.qa: Question Answering", "ml3m.utils.openai: OpenAI-related utilities"], "terms": {"The": [0, 1, 2, 4, 5, 6, 7, 8], "second": [0, 1, 4, 6, 7], "step": [0, 1], "an": [0, 1, 4, 5, 7], "llm": [0, 1], "i": [0, 1, 2, 3, 4, 5, 6, 7], "choos": 0, "suitabl": 0, "method": [0, 4, 6, 7], "either": [0, 1, 4, 6], "score": [0, 4, 5, 6, 7], "respons": [0, 3, 4, 6, 7], "directli": 0, "compar": [0, 1, 7], "refer": [0, 1, 4, 6, 7], "answer": [0, 6], "obtain": [0, 1, 4, 5, 6], "final": [0, 4, 6, 7], "ml3m": [0, 1, 2], "provid": [0, 1], "store": [0, 1], "them": [0, 1, 4, 6, 7], "csv": [0, 1, 4, 6, 7], "file": [0, 4, 5, 6, 7, 8], "relev": [0, 1], "class": [0, 1, 6, 7], "ar": [0, 1, 4, 5, 6, 7], "base": [0, 1, 3, 5, 6, 7, 8], "modul": 0, "intend": 0, "subclass": [0, 4], "cannot": [0, 4], "us": [0, 1, 2, 3, 4, 6, 7], "which": [0, 1, 4], "we": [0, 1], "discuss": 0, "now": [0, 1, 6, 7], "yet": [0, 3], "all": [0, 1, 4, 6, 7], "follow": [0, 1, 2, 4, 5, 6, 7, 8], "similar": 0, "api": [0, 4, 6, 7, 8], "To": [0, 1], "you": [0, 1, 2], "need": [0, 1, 4, 6, 7], "prepar": [0, 1], "dataset": [0, 4, 6, 7], "save": [0, 1, 4, 6, 7], "locat": [0, 1, 4, 6, 7], "save_path": [0, 4, 6, 7], "here": [0, 1, 6, 7], "exactli": 0, "correspond": [0, 1, 4], "gener": [0, 3, 4], "accept": [0, 1], "format": [0, 4, 6, 7], "also": [0, 1, 4, 6, 7], "same": [0, 1, 4, 6, 7], "describ": 0, "requir": [0, 1, 2, 4], "paramet": [0, 1], "info_func": [0, 4, 6, 7], "should": [0, 1, 4, 6, 7], "data": [0, 4, 6, 7], "item": [0, 4, 6, 7], "return": [0, 1], "question": [0, 1], "queri": [0, 4], "For": [0, 1, 4, 6, 7], "detail": [0, 4, 7], "what": [0, 1], "document": 0, "extract": [0, 4, 6, 7], "from": [0, 1, 4, 6, 7], "mean": [0, 4, 6, 7], "recommend": [0, 1, 2, 4], "advanc": [0, 1], "instead": [0, 4], "while": [0, 4], "first": 1, "evalu": [1, 3, 4, 5, 6, 7], "perform": [1, 3], "its": [1, 4, 6, 7], "commonli": [1, 4], "form": [1, 4, 6, 7], "train": 1, "each": [1, 4, 6, 7], "contain": 1, "input": [1, 4, 6, 7], "output": [1, 4, 6, 7], "inform": [1, 4, 7], "suffici": 1, "construct": 1, "thi": [1, 2, 3, 4, 5, 6, 7], "can": [1, 2, 4, 5, 6, 7], "treat": [1, 4, 6, 7], "ground": [1, 7], "truth": [1, 7], "except": [1, 4, 6], "our": 1, "respond": 1, "append": [1, 4], "origin": [1, 4], "responsegener": [1, 4], "would": [1, 4, 6, 7], "orig_dataset": [1, 4], "reason": [1, 5], "updat": 1, "place": 1, "keep": [1, 2], "clean": 1, "other": [1, 7], "possibl": 1, "There": 1, "current": 1, "three": [1, 6, 7], "support": [1, 4, 6, 7], "introduc": 1, "next": 1, "let": 1, "u": 1, "suppos": [1, 4, 6, 7], "response_nam": [1, 4], "my_respons": 1, "specifi": [1, 4, 6, 7], "kei": [1, 4, 6, 7, 8], "column": [1, 4, 6, 7], "name": [1, 4, 5, 6], "howev": [1, 4, 6, 7], "practic": 1, "extrem": [1, 4, 6], "care": [1, 4, 6], "when": [1, 4, 5, 6, 7], "pick": 1, "exist": [1, 4, 5, 6, 7], "jsonl": [1, 4, 6, 7], "default": [1, 4, 6, 7], "As": 1, "simpl": 1, "exampl": 1, "instruct": [1, 6, 7], "capit": 1, "china": 1, "beij": 1, "franc": 1, "pari": 1, "In": [1, 4, 5, 6, 7], "case": [1, 4, 5], "line": [1, 4, 6, 7], "consid": [1, 4, 7], "load": [1, 4, 6, 7], "dictionari": [1, 4, 5, 6, 7], "e": [1, 4, 6, 7], "g": [1, 4], "result": [1, 4, 6, 7], "look": [1, 4, 6, 7, 8], "like": [1, 4, 6, 7, 8], "xxx": [1, 6, 7], "One": 1, "list": [1, 4, 6, 7, 8], "json": [1, 4, 6, 7, 8], "fmt": [1, 4, 6, 7], "overal": 1, "must": [1, 4, 6, 7], "arrai": 1, "where": 1, "object": [1, 4, 8], "type": [1, 6, 7], "dict": [1, 4, 6, 7], "panda": [1, 2, 4, 6, 7], "datafram": [1, 4, 6, 7], "row": [1, 4, 6, 7], "seri": [1, 4, 6, 7], "addit": [1, 4], "further": 1, "query_func": [1, 4], "vari": 1, "ha": [1, 4, 6, 7], "been": [1, 4, 6, 7], "previou": 1, "subsect": 1, "therefor": 1, "Its": [1, 2], "valu": [1, 4, 5, 7], "onli": [1, 4, 5, 6, 7], "string": [1, 4, 6, 7], "repres": [1, 4, 5], "few": 1, "import": [1, 2], "point": 1, "worth": 1, "note": 1, "catch": [1, 4], "ani": [1, 4, 5, 6, 7], "caus": [1, 4], "fail": [1, 4, 6, 7], "otherwis": [1, 4, 6, 7], "abl": 1, "notic": 1, "unless": 1, "intent": 1, "synchron": [1, 4], "asynchoun": 1, "If": [1, 4, 5, 6, 7], "synchroun": 1, "n_worker": [1, 4, 8], "1": [1, 4, 6, 7, 8], "asynchron": [1, 4], "your": [1, 7], "parallel": [1, 4], "infer": 1, "significantli": 1, "improv": 1, "speed": 1, "doe": [1, 4, 6, 7], "make": 1, "meaningless": 1, "initi": 1, "code": 1, "sinc": [1, 2, 4, 6], "execut": 1, "loop": [1, 4], "snippet": 1, "It": [1, 4], "take": [1, 4], "section": 1, "o": 1, "torch": 1, "transform": 1, "automodelforcausallm": 1, "autotoken": 1, "util": [1, 3, 6, 7], "generationconfig": 1, "path": [1, 4, 6, 7, 8], "assum": [1, 6, 7, 8], "desir": 1, "mai": [1, 2, 4, 6, 7], "own": 1, "absolut": [1, 4, 6, 7, 8], "dirnam": 1, "__file__": 1, "join": 1, "done": 1, "token": 1, "from_pretrain": 1, "use_fast": 1, "fals": [1, 4, 6, 7], "trust_remote_cod": 1, "true": 1, "device_map": 1, "auto": 1, "torch_dtyp": 1, "float16": 1, "data_item": [1, 4, 6, 7], "structur": 1, "def": [1, 4, 6, 7], "chat": [1, 4], "role": [1, 4], "user": 1, "content": [1, 4, 6, 7], "creat": [1, 4], "logging_mod": [1, 4, 6, 7], "verbos": [1, 4, 6, 7], "certain": 1, "account": [1, 4, 6, 7], "boolean": 1, "indic": [1, 4, 6, 7], "whether": [1, 4, 6, 7], "error": [1, 3, 4, 6, 7], "out": [1, 4, 6, 7], "moreov": [1, 4], "regener": 1, "alreadi": [1, 4, 6], "have": [1, 2, 7], "safe": 1, "time": 1, "do": [1, 3, 4, 6, 7], "someth": 1, "max_it": 1, "5": [1, 4, 6, 7, 8], "_": 1, "rang": [1, 4, 6, 7], "complet": [1, 4, 6, 7], "break": 1, "keyword": [1, 4], "overwrit": [1, 4, 6, 7], "ignor": [1, 4], "one": [1, 4, 6, 7], "set": [1, 4, 6], "common": [1, 7], "nice": 1, "serv": 1, "purpos": 1, "simpli": [1, 4], "differ": 1, "instanc": [1, 6], "functool": 1, "partial": [1, 4, 6, 7], "model1_respons": 1, "zip": 1, "model1": 1, "model2": 1, "tokenizer1": 1, "tokenizer2": 1, "python": 2, "3": [2, 4, 6, 7], "8": [2, 4, 6, 7], "work": 2, "linux": 2, "maco": 2, "window": 2, "depend": [2, 4, 6, 7], "includ": [2, 4, 7], "numpi": 2, "openai": [2, 3, 4, 6, 7], "tqdm": 2, "wai": 2, "via": [2, 4, 6, 7], "pip": 2, "after": [2, 4, 6, 7], "packag": [2, 3], "command": 2, "check": 2, "version": [2, 4], "c": [2, 6], "show_vers": 2, "still": [2, 3], "unstabl": 2, "frequent": 2, "new": 2, "releas": 2, "alwai": 2, "up": 2, "whenev": 2, "avail": [2, 4, 6, 7], "upgrad": 2, "under": 3, "develop": 3, "pleas": 3, "instal": 3, "model": [3, 4, 6, 7], "mcq": 3, "qa": 3, "baseevalu": [4, 7], "str": [4, 5, 6, 7, 8], "subject": [4, 5, 6, 7], "datasetformat": [4, 6, 7], "worker": [4, 6, 7], "int": [4, 6, 7], "n_iter": [4, 6, 7], "agg_method": 4, "aggregatemethod": 4, "none": [4, 5, 6, 7], "loggingmod": [4, 6, 7], "0": [4, 6, 7, 8], "sourc": [4, 5, 6, 7, 8], "meant": 4, "overridden": [4, 7], "_aget_scor": 4, "multipl": [4, 5], "_get_scor": 4, "singl": [4, 5], "pathlib": [4, 6, 7, 8], "written": [4, 6, 7], "build": [4, 6, 7], "strictli": 4, "how": 4, "real": [4, 5, 6, 7], "element": 4, "": 4, "pair": 4, "appear": 4, "discard": 4, "miss": [4, 7], "integ": 4, "number": [4, 6, 7], "process": [4, 6, 7], "sequenti": 4, "length": 4, "argument": 4, "pass": [4, 6], "iter": [4, 6, 7], "round": 4, "convinc": 4, "enough": 4, "some": [4, 6, 7], "statist": 4, "sum": 4, "min": 4, "max": 4, "mode": [4, 6, 7], "aggreg": 4, "log": [4, 6, 7], "level": [4, 6, 7], "neg": [4, 6, 7], "progress": [4, 6, 7], "bar": [4, 6, 7], "displai": [4, 6, 7], "posit": [4, 6, 7], "determin": [4, 6, 7], "messag": [4, 5, 6, 7], "async": 4, "dataitemtyp": [4, 6, 7], "kwarg": 4, "see": [4, 6, 7], "involv": 4, "anyth": 4, "asynchroun": 4, "self": 4, "actual": [4, 5, 6, 7], "task": [4, 6, 7], "becaus": 4, "give": 4, "awai": 4, "control": 4, "event": 4, "implement": 4, "defin": [4, 6, 7], "mutlipl": 4, "rememb": 4, "reserv": 4, "index": [4, 6, 7], "realiz": 4, "bool": [4, 6, 7], "built": [4, 6, 7], "upon": [4, 6, 7], "overwritten": [4, 6, 7], "load_avg_scor": [4, 6, 7], "subject_subset": [4, 6, 7], "averag": [4, 6, 7], "select": [4, 6, 7], "appli": [4, 6, 7], "necessarili": [4, 6, 7], "subset": [4, 6, 7], "pd": [4, 6, 7], "taken": [4, 6, 7], "comput": [4, 6, 7], "avg_scor": [4, 6, 7], "score1": [4, 6, 7], "score2": [4, 6, 7], "78": [4, 6, 7], "83": [4, 6, 7], "64": [4, 6, 7], "76": [4, 6, 7], "2": [4, 6, 7], "100": [4, 6, 7], "92": [4, 6, 7], "28": [4, 6, 7], "38": [4, 6, 7], "4": [4, 6, 7], "30": [4, 6, 7, 8], "45": [4, 6, 7], "60": [4, 6, 7], "66": [4, 6, 7], "7": [4, 6, 7], "load_scor": [4, 6, 7], "order": [4, 6, 7], "assign": [4, 5, 6, 7], "nan": [4, 6, 7], "6": [4, 6, 7], "baseopenaievalu": [4, 6, 7], "openai_config": [4, 6, 7, 8], "timeout": [4, 6, 7], "float": [4, 6, 7], "gpt": [4, 6, 7], "turbo": [4, 6, 7], "openai_kwarg": 4, "overriden": 4, "_prompt": 4, "_extract_scor": 4, "configur": [4, 6, 7, 8], "cancel": [4, 6, 7], "id": [4, 6, 7], "chatcomplet": [4, 6, 7], "http": [4, 6, 7, 8], "platform": [4, 6, 7], "com": [4, 6, 7, 8], "doc": [4, 6, 7], "endpoint": [4, 6, 7], "compat": [4, 6, 7], "mark": 4, "option": [4, 5, 6, 7], "try": 4, "api_kei": 4, "api_bas": 4, "through": 4, "repli": 4, "comparion": 4, "well": [4, 7], "sens": 4, "prompt": [4, 7], "expect": [4, 6, 7], "invok": 4, "tupl": [4, 6, 7], "sys_msg": 4, "system": [4, 6], "profession": 4, "teacher": 4, "field": 4, "empti": 4, "guid": 4, "eval_prompt": 4, "callabl": [4, 6, 7], "combin": 4, "preserv": 4, "function": [4, 6, 7], "whatev": 4, "print": 4, "consol": 4, "high": 4, "Be": [4, 6], "warn": [4, 6], "rais": [4, 6], "invalidparametererror": 5, "param_nam": 5, "invalid": 5, "reveal": 5, "why": 5, "scoringerror": 5, "happen": 5, "mainli": 5, "found": 5, "mcqopenaievalu": 6, "score_nam": 6, "label_typ": 6, "liter": 6, "upper": 6, "lower": 6, "digit": 6, "label_cnt": 6, "abil": [6, 7], "tell": [6, 7], "correct": 6, "credit": 6, "specif": [6, 7], "respect": [6, 7], "label": 6, "stand": 6, "A": 6, "b": 6, "d": 6, "person": 6, "histori": [6, 7], "Then": [6, 7], "n": [6, 7], "formatted_quest": 6, "f": 6, "na": 6, "nb": 6, "nc": 6, "nd": 6, "qametricevalu": 7, "bleu_k": 7, "metric": 7, "bleu": 7, "k": 7, "bilingu": 7, "understudi": 7, "qaopenaievalu": 7, "domain": 7, "aspect": 7, "aspect_descript": 7, "qualiti": 7, "accuraci": 7, "factual": 7, "incorrect": 7, "clariti": 7, "organ": 7, "clearli": 7, "present": 7, "poor": 7, "knowledg": 7, "chatgpt": 7, "know": 7, "given": 7, "evalut": 7, "than": 7, "thei": 7, "map": 7, "descript": 7, "get_openai_config": 8, "config_path": 8, "_openaiconfig": 8, "get": 8, "config": 8, "sk": 8, "xxx1": 8, "null": 8, "xxx2": 8, "127": 8, "v1": 8}, "objects": {"ml3m": [[4, 0, 0, "-", "base"], [5, 0, 0, "-", "errors"], [6, 0, 0, "-", "mcq"], [7, 0, 0, "-", "qa"]], "ml3m.base": [[4, 1, 1, "", "BaseEvaluator"], [4, 1, 1, "", "BaseOpenAIEvaluator"], [4, 1, 1, "", "ResponseGenerator"]], "ml3m.base.BaseEvaluator": [[4, 2, 1, "", "_aget_score"], [4, 2, 1, "", "_get_score"], [4, 2, 1, "", "evaluate"], [4, 2, 1, "", "load_avg_score"], [4, 2, 1, "", "load_scores"]], "ml3m.base.BaseOpenAIEvaluator": [[4, 2, 1, "", "_extract_scores"], [4, 2, 1, "", "_prompt"], [4, 2, 1, "", "evaluate"], [4, 2, 1, "", "load_avg_score"], [4, 2, 1, "", "load_scores"]], "ml3m.base.ResponseGenerator": [[4, 2, 1, "", "generate"]], "ml3m.errors": [[5, 3, 1, "", "InvalidParameterError"], [5, 3, 1, "", "ScoringError"]], "ml3m.mcq": [[6, 1, 1, "", "McqOpenAIEvaluator"]], "ml3m.mcq.McqOpenAIEvaluator": [[6, 2, 1, "", "evaluate"], [6, 2, 1, "", "load_avg_score"], [6, 2, 1, "", "load_scores"]], "ml3m.qa": [[7, 1, 1, "", "QaMetricEvaluator"], [7, 1, 1, "", "QaOpenAIEvaluator"]], "ml3m.qa.QaMetricEvaluator": [[7, 2, 1, "", "evaluate"], [7, 2, 1, "", "load_avg_score"], [7, 2, 1, "", "load_scores"]], "ml3m.qa.QaOpenAIEvaluator": [[7, 2, 1, "", "evaluate"], [7, 2, 1, "", "load_avg_score"], [7, 2, 1, "", "load_scores"]], "ml3m.utils": [[8, 0, 0, "-", "openai"]], "ml3m.utils.openai": [[8, 4, 1, "", "get_openai_config"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:exception", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "exception", "Python exception"], "4": ["py", "function", "Python function"]}, "titleterms": {"evalu": 0, "model": [0, 1], "perform": 0, "defin": [0, 1], "inform": 0, "function": [0, 1], "gener": 1, "respons": 1, "dataset": 1, "format": 1, "data": 1, "item": 1, "queri": 1, "multipl": [1, 6], "instal": 2, "welcom": 3, "ml3m": [3, 4, 5, 6, 7, 8], "": 3, "document": 3, "get": 3, "start": 3, "api": 3, "refer": 3, "base": 4, "class": 4, "paramet": [4, 5, 6, 7, 8], "return": [4, 6, 7, 8], "note": [4, 6, 7], "exampl": [4, 6, 7, 8], "error": 5, "custom": 5, "except": 5, "mcq": 6, "choic": 6, "question": [6, 7], "qa": 7, "answer": 7, "util": 8, "openai": 8, "relat": 8}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Evaluating Model Performance": [[0, "evaluating-model-performance"]], "Defining the Information Function": [[0, "defining-the-information-function"]], "Generating Model Responses": [[1, "generating-model-responses"]], "Dataset Formats and Data Items": [[1, "dataset-formats-and-data-items"]], "Defining the Querying Function": [[1, "defining-the-querying-function"]], "Generating the Responses": [[1, "generating-the-responses"]], "Generating the Responses of Multiple Models": [[1, "generating-the-responses-of-multiple-models"]], "Installation": [[2, "installation"]], "Welcome to ml3m\u2019s documentation!": [[3, "welcome-to-ml3m-s-documentation"]], "Getting Started": [[3, null]], "API Reference": [[3, null]], "ml3m.base: Base Classes": [[4, "module-ml3m.base"]], "Parameters": [[4, "parameters"], [4, "id1"], [4, "id2"], [4, "id4"], [4, "id6"], [4, "id9"], [4, "id10"], [4, "id13"], [4, "id15"], [4, "id17"], [4, "id20"], [4, "id23"], [4, "id24"], [5, "parameters"], [6, "parameters"], [6, "id1"], [6, "id2"], [6, "id4"], [7, "parameters"], [7, "id1"], [7, "id2"], [7, "id4"], [7, "id7"], [7, "id9"], [7, "id11"], [7, "id14"], [8, "parameters"]], "Returns": [[4, "returns"], [4, "id3"], [4, "id5"], [4, "id7"], [4, "id11"], [4, "id14"], [4, "id16"], [4, "id18"], [4, "id21"], [4, "id25"], [6, "returns"], [6, "id3"], [6, "id5"], [7, "returns"], [7, "id3"], [7, "id5"], [7, "id10"], [7, "id12"], [7, "id15"], [8, "returns"]], "Notes": [[4, "notes"], [4, "id12"], [6, "notes"], [7, "notes"], [7, "id8"]], "Examples": [[4, "examples"], [4, "id8"], [4, "id19"], [4, "id22"], [6, "examples"], [6, "id6"], [7, "examples"], [7, "id6"], [7, "id13"], [7, "id16"], [8, "examples"]], "ml3m.errors: Customized Exceptions": [[5, "module-ml3m.errors"]], "ml3m.mcq: Multiple Choice Questions": [[6, "module-ml3m.mcq"]], "ml3m.qa: Question Answering": [[7, "module-ml3m.qa"]], "ml3m.utils.openai: OpenAI-related utilities": [[8, "module-ml3m.utils.openai"]]}, "indexentries": {"baseevaluator (class in ml3m.base)": [[4, "ml3m.base.BaseEvaluator"]], "baseopenaievaluator (class in ml3m.base)": [[4, "ml3m.base.BaseOpenAIEvaluator"]], "responsegenerator (class in ml3m.base)": [[4, "ml3m.base.ResponseGenerator"]], "_aget_score() (ml3m.base.baseevaluator method)": [[4, "ml3m.base.BaseEvaluator._aget_score"]], "_extract_scores() (ml3m.base.baseopenaievaluator method)": [[4, "ml3m.base.BaseOpenAIEvaluator._extract_scores"]], "_get_score() (ml3m.base.baseevaluator method)": [[4, "ml3m.base.BaseEvaluator._get_score"]], "_prompt() (ml3m.base.baseopenaievaluator method)": [[4, "ml3m.base.BaseOpenAIEvaluator._prompt"]], "evaluate() (ml3m.base.baseevaluator method)": [[4, "ml3m.base.BaseEvaluator.evaluate"]], "evaluate() (ml3m.base.baseopenaievaluator method)": [[4, "ml3m.base.BaseOpenAIEvaluator.evaluate"]], "generate() (ml3m.base.responsegenerator method)": [[4, "ml3m.base.ResponseGenerator.generate"]], "load_avg_score() (ml3m.base.baseevaluator method)": [[4, "ml3m.base.BaseEvaluator.load_avg_score"]], "load_avg_score() (ml3m.base.baseopenaievaluator method)": [[4, "ml3m.base.BaseOpenAIEvaluator.load_avg_score"]], "load_scores() (ml3m.base.baseevaluator method)": [[4, "ml3m.base.BaseEvaluator.load_scores"]], "load_scores() (ml3m.base.baseopenaievaluator method)": [[4, "ml3m.base.BaseOpenAIEvaluator.load_scores"]], "ml3m.base": [[4, "module-ml3m.base"]], "module": [[4, "module-ml3m.base"], [5, "module-ml3m.errors"], [6, "module-ml3m.mcq"], [7, "module-ml3m.qa"], [8, "module-ml3m.utils.openai"]], "invalidparametererror": [[5, "ml3m.errors.InvalidParameterError"]], "scoringerror": [[5, "ml3m.errors.ScoringError"]], "ml3m.errors": [[5, "module-ml3m.errors"]], "mcqopenaievaluator (class in ml3m.mcq)": [[6, "ml3m.mcq.McqOpenAIEvaluator"]], "evaluate() (ml3m.mcq.mcqopenaievaluator method)": [[6, "ml3m.mcq.McqOpenAIEvaluator.evaluate"]], "load_avg_score() (ml3m.mcq.mcqopenaievaluator method)": [[6, "ml3m.mcq.McqOpenAIEvaluator.load_avg_score"]], "load_scores() (ml3m.mcq.mcqopenaievaluator method)": [[6, "ml3m.mcq.McqOpenAIEvaluator.load_scores"]], "ml3m.mcq": [[6, "module-ml3m.mcq"]], "qametricevaluator (class in ml3m.qa)": [[7, "ml3m.qa.QaMetricEvaluator"]], "qaopenaievaluator (class in ml3m.qa)": [[7, "ml3m.qa.QaOpenAIEvaluator"]], "evaluate() (ml3m.qa.qametricevaluator method)": [[7, "ml3m.qa.QaMetricEvaluator.evaluate"]], "evaluate() (ml3m.qa.qaopenaievaluator method)": [[7, "ml3m.qa.QaOpenAIEvaluator.evaluate"]], "load_avg_score() (ml3m.qa.qametricevaluator method)": [[7, "ml3m.qa.QaMetricEvaluator.load_avg_score"]], "load_avg_score() (ml3m.qa.qaopenaievaluator method)": [[7, "ml3m.qa.QaOpenAIEvaluator.load_avg_score"]], "load_scores() (ml3m.qa.qametricevaluator method)": [[7, "ml3m.qa.QaMetricEvaluator.load_scores"]], "load_scores() (ml3m.qa.qaopenaievaluator method)": [[7, "ml3m.qa.QaOpenAIEvaluator.load_scores"]], "ml3m.qa": [[7, "module-ml3m.qa"]], "get_openai_config() (in module ml3m.utils.openai)": [[8, "ml3m.utils.openai.get_openai_config"]], "ml3m.utils.openai": [[8, "module-ml3m.utils.openai"]]}})